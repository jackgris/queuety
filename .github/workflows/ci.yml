name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: "1.24"

jobs:
  # Linting and formatting checks
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --config .golangci.yml --timeout 10m

  # Tests
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.24"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Install test dependencies
        run: |
          go install gotest.tools/gotestsum@latest

      - name: Run tests
        run: |
          gotestsum --format testname -- -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        if: matrix.go-version == env.GO_VERSION
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        run: |
          go build -v -ldflags="-s -w" -o queuety ./main.go

      - name: Test binary execution
        run: |
          chmod +x queuety
          ./queuety --help || true
          echo "âœ… Binary built successfully"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: queuety-binary
          path: queuety
          retention-days: 7

  # Docker build and test
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: queuety
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm queuety:latest --help || true
          echo "âœ… Docker image built successfully"


  # Final success notification
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: success()
    steps:
      - name: Success notification
        run: |
          echo "ðŸŽ‰ All CI checks passed successfully!"
          echo "âœ… Linting: PASSED"
          echo "âœ… Tests: PASSED" 
          echo "âœ… Build: PASSED"
          echo "âœ… Docker: PASSED"
          echo ""
          echo "ðŸš€ Ready for deployment!"
